Before Change:
	//testing {
		if (board[row][col] == board[13][13] && pathLength == 6){
			for (BoardCell see: targets)
			{
					System.out.println("Targets: [" + see.getCol() + "][" + see.getRow() + "]");
			}
		}
	}

After Change: 
	/* testing {
		if (board[row][col] == board[13][13] && pathLength == 6){
			for (BoardCell see: targets)
			{
				System.out.println("Targets: [" + see.getCol() + "][" + see.getRow() + "]");
			}
		}
	*/

Before Change:
	//checking if it is a walkway possibility
		if (board[i][j - 1].isWalkway()){
			if (board[i][j] == board[11][6]) System.out.println("HERE j - 1");
				switch (board[i][j].getDoorDirection()){
				case LEFT:
					adj.add(board[i][j - 1]);
				break;

After Change:
	//checking if it is a walkway possibility
		if (board[i][j - 1].isWalkway()){
			//if (board[i][j] == board[11][6]) System.out.println("HERE j - 1");
				switch (board[i][j].getDoorDirection()){
				case LEFT:
					adj.add(board[i][j - 1]);
				break;
Before Change:
	public void find (int row, int col, int pathLength)
	{
		Set<BoardCell> adjCell = new HashSet<BoardCell>();
		if (adjMatrix.containsKey(board[row][col]))
		{
			adjCell = adjMatrix.get(board[row][col]);
			for (BoardCell test: adjCell)
			{
				
				if (visited.contains(test))
				{
					 
				}
				else
				{
					
					visited.add(test);
					if (pathLength == 1)
					{
						targets.add(test);
					}
					else
					{
						find(test.getCol(), test.getRow(), pathLength - 1);
					}
					visited.remove(test);
				}
			}
			/* testing {
			if (board[row][col] == board[13][13] && pathLength == 6){
				for (BoardCell see: targets)
				{
					System.out.println("Targets: [" + see.getCol() + "][" + see.getRow() + "]");
				}
			}
			*/
		}
		else 
		{
			System.out.println("This key does not exist in the adjMatrix");
		}
	}

After Change:
	public void find (int row, int col, int pathLength)
	{
		Set<BoardCell> adjCell = new HashSet<BoardCell>();
		if (adjMatrix.containsKey(board[row][col]))
		{
			adjCell = adjMatrix.get(board[row][col]);
			for (BoardCell test: adjCell)
			{
				
				if (visited.contains(test))
				{
					 
				}
				else
				{
					
					visited.add(test);
					if (pathLength == 1)
					{
						targets.add(test);
					}
					else
					{
						find(test.getCol(), test.getRow(), pathLength - 1);
					}
					visited.remove(test);
				}
			}
		}
		else 
		{
			System.out.println("This key does not exist in the adjMatrix");
		}
	}
Before Change:
void find (int row, int col, int pathLength)
	{
		Set<BoardCell_CR> adjCell = new HashSet<BoardCell_CR>();
		if (adjMatrix.containsKey(board[row][col]))
		{
			adjCell = adjMatrix.get(board[row][col]);
			for (BoardCell_CR test: adjCell)
			{

				if (visited.contains(test))
				{

				}

				visited.add(test);

				if (pathLength == 1)
				{
					targets.add(test);
				}
				else
				{
					find(test.getCol(), test.getRow(), pathLength - 1);
				}
				visited.remove(test);

			}
		}
		else 
		{
			System.out.println("This key does not exist in the adjMatrix");
		}:

After Change:
public void find (int row, int col, int pathLength)
	{
		Set<BoardCell_CR> adjCell = new HashSet<BoardCell_CR>();
		if (adjMatrix.containsKey(board[row][col]))
		{
			adjCell = adjMatrix.get(board[row][col]);
			for (BoardCell_CR test: adjCell)
			{

				if (test.isDoorway() && !visited.contains(test))
				{
					targets.add(test);
				}
				if (visited.contains(test))
				{
					continue;
				}
				else
				{
					visited.add(test);
				}

				if (pathLength == 1)
				{
					targets.add(test);
				}
				else
				{
					find(test.getCol(), test.getRow(), pathLength - 1);
				}
				visited.remove(test);

			}
		}
		else 
		{
			System.out.println("This key does not exist in the adjMatrix");
		}

Before Changes:
	public BoardCell() {
		row = 0;
		col = 0;
		initial = 'P';
		doorDir = DoorDirection.NONE;
	} 

After Changes: 	
	public BoardCell() {
		this.row = 0;
		this.col = 0;
		this.initial = 'P';
		this.doorDir = DoorDirection.NONE;
	} 

